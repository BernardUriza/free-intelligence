"""Type stubs for h5py to suppress false positives in Pylance."""
from collections.abc import Iterator
from os import PathLike
from typing import Any, overload

# Basic type aliases
_T = Any  # Generic type variable

class Group:
    """HDF5 Group stub."""
    def __getitem__(self, name: str) -> Group | Dataset | Datatype: ...
    def __setitem__(self, name: str, value: Any) -> None: ...
    def __contains__(self, name: str) -> bool: ...
    def keys(self) -> Iterator[str]: ...
    def values(self) -> Iterator[Group | Dataset | Datatype]: ...
    def items(self) -> Iterator[tuple[str, Group | Dataset | Datatype]]: ...
    def create_group(self, name: str) -> Group: ...
    def create_dataset(
        self,
        name: str,
        shape: tuple[int, ...] | None = None,
        dtype: Any = None,
        data: Any = None,
        **kwargs: Any,
    ) -> Dataset: ...
    @property
    def attrs(self) -> AttributeManager: ...

class Dataset:
    """HDF5 Dataset stub."""
    def __getitem__(self, key: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def resize(self, size: int | tuple[int, ...]) -> None: ...
    @property
    def shape(self) -> tuple[int, ...]: ...
    @property
    def dtype(self) -> Any: ...
    @property
    def size(self) -> int: ...
    @property
    def maxshape(self) -> tuple[int | None, ...]: ...
    @property
    def attrs(self) -> AttributeManager: ...

class Datatype:
    """HDF5 Datatype stub."""

    pass

class File(Group):
    """HDF5 File stub."""
    @overload
    def __init__(self, name: str, mode: str = "r", **kwargs: Any) -> None: ...
    @overload
    def __init__(self, name: PathLike[str], mode: str = "r", **kwargs: Any) -> None: ...
    def __enter__(self) -> File: ...
    def __exit__(self, *args: Any) -> None: ...
    def close(self) -> None: ...
    @property
    def filename(self) -> str: ...

class AttributeManager:
    """HDF5 Attribute Manager stub."""
    def __getitem__(self, name: str) -> Any: ...
    def __setitem__(self, name: str, value: Any) -> None: ...
    def __contains__(self, name: str) -> bool: ...
    def keys(self) -> Iterator[str]: ...
    def values(self) -> Iterator[Any]: ...
    def items(self) -> Iterator[tuple[str, Any]]: ...
    def get(self, name: str, default: Any = None) -> Any: ...
