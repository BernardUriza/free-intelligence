#!/usr/bin/env bash
#
# Run All Chaos Drills E2E
# Card: FI-RELIABILITY-STR-001
#
# Executes all 4 chaos drills and generates consolidated report

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
cd "$PROJECT_ROOT"

OUTPUT_DIR="/tmp"
REPORT_FILE="$OUTPUT_DIR/chaos_drill_report_all.md"

echo "============================================================"
echo "üî• CHAOS DRILL E2E RUNNER"
echo "============================================================"
echo ""

# Clean up old reports
rm -f "$OUTPUT_DIR"/drill_*.json
rm -f "$REPORT_FILE"

# Track overall success
FAILED_DRILLS=()

# 1. corpus_file_lock
echo "‚ñ∂Ô∏è  Running corpus_file_lock..."
if python3 scripts/run_chaos_drill.py corpus_file_lock \
  --execute --yes \
  --concurrency 10 \
  --duration 5 \
  --output "$OUTPUT_DIR/drill_corpus_lock_v3.json" 2>&1 | tee "$OUTPUT_DIR/drill_corpus_lock.log"; then
  echo "‚úÖ corpus_file_lock: SUCCESS"
else
  echo "‚ùå corpus_file_lock: FAILED"
  FAILED_DRILLS+=("corpus_file_lock")
fi
echo ""

# 2. llm_timeout_storm
echo "‚ñ∂Ô∏è  Running llm_timeout_storm..."
if python3 scripts/run_chaos_drill.py llm_timeout_storm \
  --execute --yes \
  --mode app-mock \
  --duration 20 \
  --concurrency 10 \
  --timeout-ms 1500 \
  --rps 5 \
  --output "$OUTPUT_DIR/drill_llm_timeout_storm_v1.json" 2>&1 | tee "$OUTPUT_DIR/drill_llm_storm.log"; then
  echo "‚úÖ llm_timeout_storm: SUCCESS"
else
  echo "‚ùå llm_timeout_storm: FAILED"
  FAILED_DRILLS+=("llm_timeout_storm")
fi
echo ""

# 3. disk_full
echo "‚ñ∂Ô∏è  Running disk_full..."
if python3 scripts/run_chaos_drill.py disk_full \
  --execute --yes \
  --path /tmp/fi-chaos-disk \
  --fill-until-pct 95 \
  --max-gb 1 \
  --duration 10 \
  --output "$OUTPUT_DIR/drill_disk_full_v1.json" 2>&1 | tee "$OUTPUT_DIR/drill_disk_full.log"; then
  echo "‚úÖ disk_full: SUCCESS"
else
  echo "‚ùå disk_full: FAILED"
  FAILED_DRILLS+=("disk_full")
fi
echo ""

# 4. network_partition (optional, may use app-mock on macOS)
echo "‚ñ∂Ô∏è  Running network_partition..."
if python3 scripts/run_chaos_drill.py network_partition \
  --execute --yes \
  --port 7001 \
  --duration 10 \
  --output "$OUTPUT_DIR/drill_network_partition_v2.json" 2>&1 | tee "$OUTPUT_DIR/drill_network.log"; then
  echo "‚úÖ network_partition: SUCCESS"
else
  echo "‚ùå network_partition: FAILED"
  FAILED_DRILLS+=("network_partition")
fi
echo ""

# Generate consolidated report
echo "============================================================"
echo "üìä GENERATING CONSOLIDATED REPORT"
echo "============================================================"
echo ""

cat > "$REPORT_FILE" <<'EOF'
# Chaos Drill E2E Report

**Date**: $(date -Iseconds)
**Environment**: $(uname -s) $(uname -r)
**Project**: Free Intelligence - Chaos Engineering

---

## Executive Summary

EOF

# Count results
TOTAL_DRILLS=4
PASSED_DRILLS=$((TOTAL_DRILLS - ${#FAILED_DRILLS[@]}))
SUCCESS_RATE=$((PASSED_DRILLS * 100 / TOTAL_DRILLS))

cat >> "$REPORT_FILE" <<EOF
- **Total Drills**: $TOTAL_DRILLS
- **Passed**: $PASSED_DRILLS
- **Failed**: ${#FAILED_DRILLS[@]}
- **Success Rate**: $SUCCESS_RATE%

EOF

if [ ${#FAILED_DRILLS[@]} -gt 0 ]; then
  echo "**Failed Drills**: ${FAILED_DRILLS[*]}" >> "$REPORT_FILE"
  echo "" >> "$REPORT_FILE"
fi

# Parse JSON results
echo "## Drill Results" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"

for drill_file in "$OUTPUT_DIR"/drill_*.json; do
  if [ -f "$drill_file" ]; then
    drill_name=$(basename "$drill_file" .json | sed 's/drill_//' | sed 's/_v[0-9]//')
    echo "### $drill_name" >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"
    echo '```json' >> "$REPORT_FILE"
    cat "$drill_file" | python3 -m json.tool 2>/dev/null >> "$REPORT_FILE" || cat "$drill_file" >> "$REPORT_FILE"
    echo '```' >> "$REPORT_FILE"
    echo "" >> "$REPORT_FILE"

    # Extract key metrics
    if command -v jq &> /dev/null; then
      STATUS=$(jq -r '.status // "UNKNOWN"' "$drill_file" 2>/dev/null || echo "UNKNOWN")
      DURATION=$(jq -r '.duration_sec // 0' "$drill_file" 2>/dev/null || echo "0")
      echo "**Status**: $STATUS | **Duration**: ${DURATION}s" >> "$REPORT_FILE"
      echo "" >> "$REPORT_FILE"
    fi
  fi
done

# Final summary
echo "---" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "## Artifacts" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "- JSON Reports: \`$OUTPUT_DIR/drill_*.json\`" >> "$REPORT_FILE"
echo "- Logs: \`$OUTPUT_DIR/drill_*.log\`" >> "$REPORT_FILE"
echo "- Consolidated Report: \`$REPORT_FILE\`" >> "$REPORT_FILE"
echo "" >> "$REPORT_FILE"
echo "ü§ñ Generated by \`scripts/run_all_drills.sh\`" >> "$REPORT_FILE"

echo "‚úÖ Report generated: $REPORT_FILE"
cat "$REPORT_FILE"

echo ""
echo "============================================================"
echo "üéâ E2E CHAOS DRILLS COMPLETE"
echo "============================================================"
echo ""
echo "Results:"
echo "  - Passed: $PASSED_DRILLS/$TOTAL_DRILLS"
echo "  - Failed: ${#FAILED_DRILLS[@]}"
echo "  - Report: $REPORT_FILE"
echo ""

# Exit with error if any drills failed
if [ ${#FAILED_DRILLS[@]} -gt 0 ]; then
  echo "‚ùå Some drills failed: ${FAILED_DRILLS[*]}"
  exit 1
else
  echo "‚úÖ All drills passed!"
  exit 0
fi
